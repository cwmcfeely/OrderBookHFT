name: CI/CD Pipeline

on:
  pull_request:
    branches: [dev, develop, main]
  push:
    branches: [dev, develop, main]

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Python dependencies
        run: pip install -r requirements.txt
      - name: Run pip-audit
        run: pip install pip-audit && pip-audit
      - name: Install Python linters
        run: pip install flake8 black isort
      - name: Auto-fix Python code style with black and isort
        run: |
          black .
          isort .
          flake8 app/ strategies/ tests/ api/
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install ESLint
        run: npm install eslint --global
      - name: Lint and auto-fix app.js
        run: eslint --fix api/static/app.js

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  unit-tests:
    runs-on: ubuntu-latest
    needs: [lint-test, security-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install -r requirements.txt pytest-cov
      - name: Run unit tests with coverage
        run: pytest --cov=app --cov=strategies --cov-report=xml --cov-report=term-missing tests/Unit/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint-test, security-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install -r requirements.txt pytest-cov
      - name: Start application server
        run: |
          python3 -m api.server &
          for i in {1..10}; do
            nc -z 127.0.0.1 8000 && echo "Server up!" && exit 0
            sleep 2
          done
          echo "Server did not start in time" && exit 1
      - name: Run integration tests with coverage
        run: pytest --cov=app --cov=strategies --cov-report=xml --cov-append tests/Integration/
        env:
          PYTHONUNBUFFERED: 1

  system-tests:
    runs-on: ubuntu-latest
    needs: [lint-test, security-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install -r requirements.txt pytest-cov
      - name: Start application server
        run: |
          python3 -m api.server &
          for i in {1..10}; do
            nc -z 127.0.0.1 8000 && echo "Server up!" && exit 0
            sleep 2
          done
          echo "Server did not start in time" && exit 1
      - name: Run system tests with coverage
        run: pytest --cov=app --cov=strategies --cov-report=xml --cov-append tests/System/
        env:
          PYTHONUNBUFFERED: 1

  docker-build:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, system-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .
      - name: Push Docker image
        run: docker push ghcr.io/${{ github.repository }}:${{ github.sha }}

  deploy-dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Azure Dev
        uses: azure/webapps-deploy@v2
        with:
          app-name: OrderBookHFT-Pilot
          slot-name: dev
          publish-profile: ${{ secrets.AZURE_DEV_PUBLISH_PROFILE }}
          images: ghcr.io/${{ github.repository }}:${{ github.sha }}

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Azure Staging
        uses: azure/webapps-deploy@v2
        with:
          app-name: OrderBookHFT-Pilot
          slot-name: staging
          publish-profile: ${{ secrets.AZURE_STAGING_PUBLISH_PROFILE }}
          images: ghcr.io/${{ github.repository }}:${{ github.sha }}

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Azure Production
        uses: azure/webapps-deploy@v2
        with:
          app-name: OrderBookHFT
          publish-profile: ${{ secrets.AZURE_PRODUCTION_PUBLISH_PROFILE }}
          images: ghcr.io/${{ github.repository }}:${{ github.sha }}