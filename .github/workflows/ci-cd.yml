# -----------------------------------------------------------
# GitHub Actions CI/CD Pipeline for OrderBookHFT
# -----------------------------------------------------------
# This workflow runs on pushes and pull requests to pilot, staging, and main.
# It performs linting, testing, security scans, Docker builds, container scanning,
# and deploys to Azure environments. It also logs deployment metrics for DORA tracking.
# -----------------------------------------------------------

name: CI/CD Pipeline

on:
  pull_request:
    branches: [pilot, staging, main] # Run on PRs to these branches
  push:
    branches: [pilot, staging, main] # Run on pushes to these branches

permissions:
  actions: read
  contents: read
  security-events: write
  packages: write # Required for pushing to GitHub Container Registry

env:
  EOD_API_KEY: ${{ secrets.EOD_API_KEY }} # Set sensitive env variable for tests

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Checkout repo code
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV # Ensure local imports work
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Use latest Python 3.12
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install Python dependencies and dev tools
        run: |
          pip install -r requirements.txt
          pip install flake8 black isort mypy pip-audit bandit pytest pytest-cov types-requests pandas-stubs types-PyYAML
      - name: Run pip-audit
        run: pip-audit # Audit for insecure Python dependencies
      - name: Auto-fix Python code style with black and isort
        run: |
          black .
          isort .
      - name: Run flake8
        run: flake8 app/ strategies/ tests/ api/ # Python linting
      - name: Run mypy (ignore missing imports)
        run: mypy --ignore-missing-imports app/ strategies/ tests/ api/ # Static typing check
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use Node.js v20 for frontend linting
      - name: Install ESLint
        run: npm install eslint --global # Globally install ESLint
      - name: Lint and auto-fix app.js
        run: eslint --fix api/static/app.js # JS linting

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-test # Run after lint-test
    steps:
      - uses: actions/checkout@v4
      - name: Install Bandit
        run: pip install bandit # Install Bandit for security scanning
      - name: Run Bandit security scanner
        run: bandit -r app/ strategies/ api/ || true # Python security scan, tolerate nonzero exit
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3 # Set up CodeQL analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3 # Run CodeQL

  unit-tests:
    runs-on: ubuntu-latest
    needs: [lint-test, security-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install dependencies and dev tools
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Run unit tests with coverage
        run: pytest --cov=app --cov=strategies --cov-report=xml --cov-report=term-missing tests/Unit/
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: cwmcfeely/OrderBookHFT

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint-test, security-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install dependencies and dev tools
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Print EOD_API_KEY status
        run: |
          if [ -z "$EOD_API_KEY" ]; then
            echo "EOD_API_KEY is NOT set"
            exit 1
          else
            echo "EOD_API_KEY is set (length: ${#EOD_API_KEY})"
          fi
      - name: Start application server
        run: |
          python3 -m api.server &
          for i in {1..10}; do
            nc -z 0.0.0.0 8000 && echo "Server up!" && exit 0
            sleep 2
          done
          echo "Server did not start in time" && exit 1
      - name: Run integration tests with coverage
        run: pytest --cov=app --cov=strategies --cov-report=xml --cov-append tests/Integration/
        env:
          PYTHONUNBUFFERED: 1
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: cwmcfeely/OrderBookHFT

  system-tests:
    runs-on: ubuntu-latest
    needs: [lint-test, security-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install dependencies and dev tools
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Start application server
        run: |
          python3 -m api.server &
          for i in {1..10}; do
            nc -z 0.0.0.0 8000 && echo "Server up!" && exit 0
            sleep 2
          done
          echo "Server did not start in time" && exit 1
      - name: Run system tests with coverage
        run: pytest --cov=app --cov=strategies --cov-report=xml --cov-append tests/System/
        env:
          PYTHONUNBUFFERED: 1
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: cwmcfeely/OrderBookHFT

  docker-build:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, system-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/orderbookhft:${{ github.sha }} .
      - name: Push Docker image
        run: docker push ghcr.io/${{ github.repository_owner }}/orderbookhft:${{ github.sha }}

  container-scan:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - uses: actions/checkout@v4
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/orderbookhft:${{ github.sha }}
          exit-code: 1
          severity: 'HIGH,CRITICAL'

  # ------------- Deploy to Pilot Environment -------------
  deploy-pilot:
    if: github.ref == 'refs/heads/pilot'
    runs-on: ubuntu-latest
    needs: [container-scan]
    environment: pilot
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Azure Pilot
        uses: azure/webapps-deploy@v2
        with:
          app-name: OrderBookHFT-Pilot
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PILOT }}
          images: ghcr.io/${{ github.repository_owner }}/orderbookhft:${{ github.sha }}
      # DORA Metrics reporting step: logs deployment metadata for tracking frequency, failures, durations, etc.
      - name: Report deployment metrics
        if: ${{ always() }}
        run: |
          echo "Workflow: $GITHUB_WORKFLOW"
          echo "Job: $GITHUB_JOB"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Status: ${{ job.status }}"
          echo "SHA: $GITHUB_SHA"
          echo "Branch: $GITHUB_REF"
          echo "Actor: $GITHUB_ACTOR"
          echo "Deployed at: $(date -u)"

  # ------------- Deploy to Staging Environment -------------
  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    needs: [container-scan]
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Azure Staging
        uses: azure/webapps-deploy@v2
        with:
          app-name: OrderBookHFT-Staging
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
          images: ghcr.io/${{ github.repository_owner }}/orderbookhft:${{ github.sha }}
      # DORA Metrics reporting step: logs deployment metadata for tracking frequency, failures, durations, etc.
      - name: Report deployment metrics
        if: ${{ always() }}
        run: |
          echo "Workflow: $GITHUB_WORKFLOW"
          echo "Job: $GITHUB_JOB"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Status: ${{ job.status }}"
          echo "SHA: $GITHUB_SHA"
          echo "Branch: $GITHUB_REF"
          echo "Actor: $GITHUB_ACTOR"
          echo "Deployed at: $(date -u)"

  # ------------- Deploy to Production Environment -------------
  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [container-scan]
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Azure Production
        uses: azure/webapps-deploy@v2
        with:
          app-name: OrderBookHFT-Prod
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PROD }}
          images: ghcr.io/${{ github.repository_owner }}/orderbookhft:${{ github.sha }}
      # DORA Metrics reporting step: logs deployment metadata for tracking frequency, failures, durations, etc.
      - name: Report deployment metrics
        if: ${{ always() }}
        run: |
          echo "Workflow: $GITHUB_WORKFLOW"
          echo "Job: $GITHUB_JOB"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Status: ${{ job.status }}"
          echo "SHA: $GITHUB_SHA"
          echo "Branch: $GITHUB_REF"
          echo "Actor: $GITHUB_ACTOR"
          echo "Deployed at: $(date -u)"